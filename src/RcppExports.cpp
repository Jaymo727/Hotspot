// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// binom_pmf
double binom_pmf(int k, int n, double p);
RcppExport SEXP _Hotspot_binom_pmf(SEXP kSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(binom_pmf(k, n, p));
    return rcpp_result_gen;
END_RCPP
}
// norm_sf
double norm_sf(double x, double mu, double std);
RcppExport SEXP _Hotspot_norm_sf(SEXP xSEXP, SEXP muSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_sf(x, mu, std));
    return rcpp_result_gen;
END_RCPP
}
// dist_params_mu
double dist_params_mu(double mu, double sd, int N);
RcppExport SEXP _Hotspot_dist_params_mu(SEXP muSEXP, SEXP sdSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_params_mu(mu, sd, N));
    return rcpp_result_gen;
END_RCPP
}
// dist_params_sd
double dist_params_sd(double mu, double sd, int N);
RcppExport SEXP _Hotspot_dist_params_sd(SEXP muSEXP, SEXP sdSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_params_sd(mu, sd, N));
    return rcpp_result_gen;
END_RCPP
}
// nonzero_mean
double nonzero_mean(NumericVector arr);
RcppExport SEXP _Hotspot_nonzero_mean(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(nonzero_mean(arr));
    return rcpp_result_gen;
END_RCPP
}
// nonzero_std
double nonzero_std(NumericVector arr, double mu);
RcppExport SEXP _Hotspot_nonzero_std(SEXP arrSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(nonzero_std(arr, mu));
    return rcpp_result_gen;
END_RCPP
}
// gi_significance
NumericVector gi_significance(NumericVector gi, NumericVector logexp, NumericVector counts, NumericMatrix neighbors, NumericVector umis);
RcppExport SEXP _Hotspot_gi_significance(SEXP giSEXP, SEXP logexpSEXP, SEXP countsSEXP, SEXP neighborsSEXP, SEXP umisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gi(giSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logexp(logexpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type umis(umisSEXP);
    rcpp_result_gen = Rcpp::wrap(gi_significance(gi, logexp, counts, neighbors, umis));
    return rcpp_result_gen;
END_RCPP
}
// gi_significance_all
NumericMatrix gi_significance_all(NumericMatrix gi, NumericMatrix logexp, NumericMatrix counts, NumericMatrix neighbors, NumericVector umis);
RcppExport SEXP _Hotspot_gi_significance_all(SEXP giSEXP, SEXP logexpSEXP, SEXP countsSEXP, SEXP neighborsSEXP, SEXP umisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gi(giSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type logexp(logexpSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type umis(umisSEXP);
    rcpp_result_gen = Rcpp::wrap(gi_significance_all(gi, logexp, counts, neighbors, umis));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Hotspot_binom_pmf", (DL_FUNC) &_Hotspot_binom_pmf, 3},
    {"_Hotspot_norm_sf", (DL_FUNC) &_Hotspot_norm_sf, 3},
    {"_Hotspot_dist_params_mu", (DL_FUNC) &_Hotspot_dist_params_mu, 3},
    {"_Hotspot_dist_params_sd", (DL_FUNC) &_Hotspot_dist_params_sd, 3},
    {"_Hotspot_nonzero_mean", (DL_FUNC) &_Hotspot_nonzero_mean, 1},
    {"_Hotspot_nonzero_std", (DL_FUNC) &_Hotspot_nonzero_std, 2},
    {"_Hotspot_gi_significance", (DL_FUNC) &_Hotspot_gi_significance, 5},
    {"_Hotspot_gi_significance_all", (DL_FUNC) &_Hotspot_gi_significance_all, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Hotspot(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
